[{"type":"macd2","set":[3,4],"lines":[2,3],"lcolor":["green","red"],"plines":[0],"fss":true,"overlay":false,"check":[[["id",2],">=",["id",3]]],"oc":"","calc":"(i, n, d) => {\n this.temp[i[0]].push(d.close);\n if (this.temp[i[0]].length >= Math.max(n[0], n[1])) {\n const eavg = (arr) => {\n const nn = arr.length;\n let value = arr.map((v, m) => v * (m + 1))\n .reduce((a, b) => a + b, 0);\n value /= ((nn * (nn + 1)) / 2);\n return value;\n }\n let value1 = eavg(this.temp[i[0]].slice(-n[0]));\n let value2 = eavg(this.temp[i[0]].slice(-n[1]));\n this.res[i[0]].push({ value: value1, time: d.time });\n this.res[i[1]].push({ value: value2, time: d.time });\n this.temp[i[0]].shift();\n this.res[i[2]].push({ value: value1 - value2, time: d.time });\n if (this.res[i[2]].length >= n[2]) {\n let value3 = eavg(this.res[i[2]].slice(-n[2]).map(v => v.value));\n this.res[i[3]].push({ value: value3, time: d.time });\n }\n }\n }"},{"type":"gain","set":[1,1],"lines":[0],"lcolor":["white"],"plines":[1,-1,0],"fss":false,"overlay":false,"check":[[["id",0],">=",["nr",0]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push(d.close);\n if (this.temp[i[0]].length >= n[0]) {\n const open = this.temp[i[0]][0]\n const { close } = d;\n let value = ( close - open) / open;\n value *= 100;\n this.res[i[0]].push({ value, time: d.time });\n this.temp[i[0]].shift();\n }\n }","oc":{"open":[[["id",0],">=",["nr",1]]],"close":[[["id",0],"<=",["nr",0]]]}},{"type":"avc2","set":[1,1],"lines":[0],"lcolor":["white"],"plines":[],"fss":false,"overlay":false,"check":[[["id",0],">=",["nr",0]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push((d.close - d.open) / d.open);\n if (this.temp[i[0]].length >= n[0]) {\n let value = this.temp[i[0]].reduce((a, b) => a + (b), 0);\n this.res[i[0]].push({ value, time: d.time });\n this.temp[i[0]].shift();\n }\n }"},{"type":"adx3","set":[3,3],"lines":[0],"lcolor":["green"],"plines":[],"fss":false,"overlay":false,"check":[[["id",0],">=",["set",2]]],"calc":"(i, n, d) => {\n const eavg = (arr) => {\n const nn = arr.length;\n let value = arr.map((v, m) => v * (m + 1))\n .reduce((a, b) => a + b, 0);\n value /= ((nn * (nn + 1)) / 2);\n return value;\n }\n let tr = d.high - d.low;\n if (this.temp[i[0]].length > 0) {\n let dmp = d.high - this.temp[i[0]][this.temp[i[0]].length - 1][0];\n let dmm = this.temp[i[0]][this.temp[i[0]].length - 1][1] - d.low;\n this.temp[i[1]].push([dmp, dmm, tr]);\n this.temp[i[0]].shift();\n }\n this.temp[i[0]].push([d.high, d.low, d.close]);\n if (this.temp[i[1]].length >= n[0]) {\n let dmm = [];\n let dmp = [];\n this.temp[i[1]].forEach((v, i) => {\n dmm.push(v[1] / v[2]);\n dmp.push(v[0] / v[2]);\n \n });\n dmp = eavg(dmp);\n dmm = eavg(dmm);\n let dx = Math.abs(dmp - dmm) / Math.abs(dmp + dmm);\n this.temp[i[2]].push(dx);\n this.temp[i[1]].shift();\n }\n if (this.temp[i[2]].length >= n[1]) {\n let adx = 100 * (eavg(this.temp[i[2]]));\n this.res[i[0]].push({ value: adx, time: d.time });\n this.temp[i[2]].shift();\n }\n }"},{"type":"pl2","set":[3,3],"lines":[0,1,2],"lcolor":["white","green","red"],"plines":[0],"fss":true,"overlay":false,"check":[[["id",1],">=",["id",2]],[["id",1],">=",["nr",0]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push(d.close);\n if (this.temp[i[0]].length >= n[2]) {\n \n let value1 = this.temp[i[0]][n[2] - 1] - this.temp[i[0]][0];\n this.temp[i[1]].push(value1);\n \n if (this.temp[i[1]].length >= n[0]) {\n let value2 = this.temp[i[1]].reduce((a, b) => a + b);\n value2 /= n[0];\n this.temp[i[2]].push(value2);\n if (this.temp[i[2]].length >= n[1]) {\n let value3 = this.temp[i[2]].reduce((a, b) => a + b);\n value3 /= n[1];\n this.res[i[0]].push({ value: value1, time: d.time });\n this.res[i[1]].push({ value: value2, time: d.time });\n this.res[i[2]].push({ value: value3, time: d.time });\n this.temp[i[2]].shift();\n }\n this.temp[i[1]].shift();\n }\n this.temp[i[0]].shift();\n }\n }"},{"type":"pl","set":[3,3],"lines":[1,2],"lcolor":["green","red"],"plines":[0],"fss":true,"overlay":false,"check":[[["id",1],">=",["id",2]],[["id",2],">=",["nr",0]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push(d.close);\n if (this.temp[i[0]].length >= n[2]) {\n \n let value1 = this.temp[i[0]][n[2] - 1] - this.temp[i[0]][0];\n this.temp[i[1]].push(value1);\n \n if (this.temp[i[1]].length >= n[0]) {\n let value2 = this.temp[i[1]].reduce((a, b) => a + b);\n value2 /= n[0];\n this.temp[i[2]].push(value2);\n if (this.temp[i[2]].length >= n[1]) {\n let value3 = this.temp[i[2]].reduce((a, b) => a + b);\n value3 /= n[1];\n this.res[i[0]].push({ value: value1, time: d.time });\n this.res[i[1]].push({ value: value2, time: d.time });\n this.res[i[2]].push({ value: value3, time: d.time });\n this.temp[i[2]].shift();\n }\n this.temp[i[1]].shift();\n }\n this.temp[i[0]].shift();\n }\n }","oc":""},{"type":"vma","set":[2,2],"lines":[0,1],"lcolor":["green","red"],"plines":[],"fss":true,"overlay":false,"check":[[["id",0],">=",["id",1]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push(d.volume);\n if (this.temp[i[0]].length >= n[1]) {\n let value1 = this.temp[i[0]].slice(-n[0]).reduce((a, b) => a + b);\n value1 /= n[0];\n let value2 = this.temp[i[0]].reduce((a, b) => a + b);\n value2 /= n[1];\n this.res[i[0]].push({ value:value1, time: d.time });\n this.res[i[1]].push({ value:value2, time: d.time });\n this.temp[i[0]].shift();\n }\n }"},{"type":"vwap","set":[1,1],"lines":[0],"lcolor":["yellow"],"plines":[],"fss":false,"overlay":true,"check":[[["id",0],"<=",["close",0]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push([(d.high + d.low + d.close) / 3, d.volume]);\n if (this.temp[i[0]].length >= n[0]) {\n const tvp = this.temp[i[0]].map(v => v[0] * v[1]).reduce((a, b) => a + b, 0);\n const tv = this.temp[i[0]].map(v => v[1]).reduce((a, b) => a + b, 0);\n const value = tvp / tv;\n this.res[i[0]].push({ value, time: d.time });\n this.temp[i[0]].shift();\n }\n }"},{"type":"rsi","set":[1,1],"lines":[0],"lcolor":["white"],"plines":[30,70],"fss":false,"overlay":false,"check":[[["id",0],">=",["nr",60]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push(((((d.close - d.open) / d.open))));\n if (this.temp[i[0]].length >= n[0]) {\n let avgg = 0, avgl = 0;\n this.temp[i[0]].forEach(v => {\n if (v > 0) {\n avgg += v;\n } else {\n avgl -= v;\n }\n });\n avgg /= n[0];\n avgl /= n[0];\n let value = 100;\n if (avgl) value = 100 - (100 / (1 + (avgg / avgl)));\n this.res[i[0]].push({ value, time: d.time });\n this.temp[i[0]].shift();\n }\n }","oc":{"open":[[["id",0],"<",["nr",30]]],"close":[[["id",0],">",["nr",70]]]}},{"type":"dblema","set":[2,2],"lines":[0,1],"lcolor":["green","red"],"plines":[],"fss":true,"overlay":true,"check":[[["id",0],">=",["id",1]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push(d.close);\n if (this.temp[i[0]].length >= Math.max(...n)) {\n const eavg = (arr) => {\n let nn = arr.length;\n let value = arr.map((v, m) => v * (m + 1))\n .reduce((a, b) => a + b, 0);\n value /= ((nn * (nn + 1)) / 2);\n return value;\n };\n let value1 = eavg(this.temp[i[0]].slice(-n[0]));\n let value2 = eavg(this.temp[i[0]].slice(-n[1]));\n this.res[i[0]].push({ value: value1, time: d.time });\n this.res[i[1]].push({ value: value2, time: d.time });\n this.temp[i[0]].shift();\n }\n }"},{"type":"macd","set":[3,4],"lines":[2,3],"lcolor":["green","red"],"plines":[0],"fss":true,"overlay":false,"check":[[["id",2],">=",["id",3]],[["id",2],">=",["nr",0]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push(d.close);\n if (this.temp[i[0]].length >= Math.max(n[0], n[1])) {\n const eavg = (arr) => {\n const nn = arr.length;\n let value = arr.map((v, m) => v * (m + 1))\n .reduce((a, b) => a + b, 0);\n value /= ((nn * (nn + 1)) / 2);\n return value;\n }\n let value1 = eavg(this.temp[i[0]].slice(-n[0]));\n let value2 = eavg(this.temp[i[0]].slice(-n[1]));\n this.res[i[0]].push({ value: value1, time: d.time });\n this.res[i[1]].push({ value: value2, time: d.time });\n this.temp[i[0]].shift();\n this.res[i[2]].push({ value: value1 - value2, time: d.time });\n if (this.res[i[2]].length >= n[2]) {\n let value3 = eavg(this.res[i[2]].slice(-n[2]).map(v => v.value));\n this.res[i[3]].push({ value: value3, time: d.time });\n }\n }\n }","oc":""},{"type":"avc","set":[1,1],"lines":[0],"lcolor":["orange"],"plines":[],"fss":false,"overlay":false,"check":[[["id",0],">=",["nr",0.05]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push((d.close - d.open) / d.open);\n if (this.temp[i[0]].length >= n[0]) {\n let value = this.temp[i[0]].reduce((a, b) => a + Math.abs(b), 0);\n this.res[i[0]].push({ value, time: d.time });\n this.temp[i[0]].shift();\n }\n }"},{"type":"adx2","set":[2,3],"lines":[0],"lcolor":["green"],"plines":[25],"fss":false,"overlay":false,"check":[[["id",0],">=",["nr",25]]],"calc":"(i, n, d) => {\n const eavg = (arr) => {\n const nn = arr.length;\n let value = arr.map((v, m) => v * (m + 1))\n .reduce((a, b) => a + b, 0);\n value /= ((nn * (nn + 1)) / 2);\n return value;\n }\n let tr = d.high - d.low;\n if (this.temp[i[0]].length > 0) {\n let dmp = d.high - this.temp[i[0]][this.temp[i[0]].length - 1][0];\n let dmm = this.temp[i[0]][this.temp[i[0]].length - 1][1] - d.low;\n this.temp[i[1]].push([dmp, dmm, tr]);\n this.temp[i[0]].shift();\n }\n this.temp[i[0]].push([d.high, d.low, d.close]);\n if (this.temp[i[1]].length >= n[0]) {\n let dmm = [];\n let dmp = [];\n this.temp[i[1]].forEach((v, i) => {\n dmm.push(v[1] / v[2]);\n dmp.push(v[0] / v[2]);\n \n });\n dmp = eavg(dmp);\n dmm = eavg(dmm);\n let dx = Math.abs(dmp - dmm) / Math.abs(dmp + dmm);\n this.temp[i[2]].push(dx);\n this.temp[i[1]].shift();\n }\n if (this.temp[i[2]].length >= n[1]) {\n let adx = 100 * (eavg(this.temp[i[2]]));\n this.res[i[0]].push({ value: adx, time: d.time });\n this.temp[i[2]].shift();\n }\n }"},{"type":"adx","set":[2,3],"lines":[0,1,2],"lcolor":["green","red","white"],"plines":[10],"fss":false,"overlay":false,"check":[[["id",2],">=",["nr",25]],[["id",0],">=",["id",1]]],"calc":"(i, n, d) => {\n if (this.temp[i[0]].length > 0) {\n let dmp = d.high - this.temp[i[0]][0][0];\n let dmm = (this.temp[i[0]][0][1] - d.low);\n dmp = Math.max(dmp, 0);\n dmm = Math.max(dmm, 0);\n let tr = d.high - d.low;\n if (!this.temp[i[1]].length > 0) {\n this.temp[i[1]] = [0, 0, 0, 0];\n }\n if (this.temp[i[1]][3] >= n[0]) {\n [dmp, dmm, tr].forEach((v, ii) => {\n const old = this.temp[i[1]][ii];\n this.temp[i[1]][ii] = old - (old / n[0]) + v;\n });\n const dip = (this.temp[i[1]][0] / this.temp[i[1]][2]) * 100;\n const dim = (this.temp[i[1]][1] / this.temp[i[1]][2]) * 100;\n this.res[i[0]].push({ value: dip, time: d.time });\n this.res[i[1]].push({ value: dim, time: d.time });\n const dx = (Math.abs(dip - dim) / Math.abs(dip + dim)) * 100;\n if (!this.temp[i[2]].length > 0) {\n this.temp[i[2]] = [0, 0];\n }\n if (this.temp[i[2]][1] >= n[1]) {\n if (this.res[i[2]].length <= 0) {\n this.temp[i[2]][0] /= n[1];\n }\n this.temp[i[2]][0] = ((this.temp[i[2]][0] * (n[1] - 1)) + dx) / n[1];\n const adx = this.temp[i[2]][0];\n this.res[i[2]].push({ value: adx, time: d.time });\n } else {\n this.temp[i[2]][0] += dx\n this.temp[i[2]][1] += 1\n }\n } else {\n [dmp, dmm, tr, 1].forEach((v, ii) => {\n this.temp[i[1]][ii] += v;\n });\n }\n }\n this.temp[i[0]][0] = [d.high, d.low];\n }"},{"type":"vma2","set":[2,2],"lines":[0,1],"lcolor":["green","red"],"plines":[],"fss":true,"overlay":false,"check":[[["id",0],">=",["id",1]]],"calc":"(i, n, d) => {\n this.temp[i[0]].push(d.volume);\n if (this.temp[i[0]].length >= n[1]) {\n let value1 = this.temp[i[0]].slice(-n[0]).reduce((a, b) => a + b);\n value1 /= n[0];\n let value2 = this.temp[i[0]].reduce((a, b) => a + b);\n value2 /= n[1];\n this.res[i[0]].push({ value:value1, time: d.time });\n this.res[i[1]].push({ value:value2, time: d.time });\n this.temp[i[0]].shift();\n }\n }"}]